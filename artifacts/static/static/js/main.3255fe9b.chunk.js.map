{"version":3,"sources":["Order/Order.js","App.js","serviceWorker.js","index.js","App.module.css","Order/Order.module.css"],"names":["cities","value","dateFormat","dateMin","moment","add","Order","useState","city","setCity","cityError","setCityError","format","date","setDate","dateError","setDateError","name","setName","nameError","setNameError","phone","setPhone","phoneError","setPhoneError","agreement","setAgreement","agreementError","setAgreementError","loading","setLoading","notification","setNotification","filteredCities","input","trim","length","regex","RegExp","toLowerCase","replace","filter","test","handleSubmit","e","preventDefault","find","o","momentDate","isValid","isBefore","setTimeout","Fragment","size","onSubmit","disabled","data-test-id","placeholder","hint","options","closeOnSelect","width","onChange","onItemSelect","item","error","calendar","earlierLimit","unix","showToday","type","label","text","className","checked","styles","guardText","view","onClick","icon","visible","theme","title","onCloseTimeout","onCloserClick","App","appContainer","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"6bAkBMA,EAAS,CACX,CAACC,MAAO,wCACR,CAACA,MAAO,8CACR,CAACA,MAAO,sEACR,CAACA,MAAO,0DACR,CAACA,MAAO,8CACR,CAACA,MAAO,oDACR,CAACA,MAAO,gEACR,CAACA,MAAO,4EACR,CAACA,MAAO,wCACR,CAACA,MAAO,+FACR,CAACA,MAAO,sEACR,CAACA,MAAO,sEACR,CAACA,MAAO,oDACR,CAACA,MAAO,0DACR,CAACA,MAAO,8CACR,CAACA,MAAO,8CACR,CAACA,MAAO,6EACR,CAACA,MAAO,8CACR,CAACA,MAAO,4EACR,CAACA,MAAO,8CACR,CAACA,MAAO,wCACR,CAACA,MAAO,8CACR,CAACA,MAAO,2DACR,CAACA,MAAO,wCACR,CAACA,MAAO,sEACR,CAACA,MAAO,wCACR,CAACA,MAAO,oDACR,CAACA,MAAO,kCACR,CAACA,MAAO,oDACR,CAACA,MAAO,0DACR,CAACA,MAAO,gEACR,CAACA,MAAO,wCACR,CAACA,MAAO,kCACR,CAACA,MAAO,kCACR,CAACA,MAAO,wCACR,CAACA,MAAO,8CACR,CAACA,MAAO,kCACR,CAACA,MAAO,wCACR,CAACA,MAAO,0DACR,CAACA,MAAO,wCACR,CAACA,MAAO,oDACR,CAACA,MAAO,8CACR,CAACA,MAAO,2DACR,CAACA,MAAO,yFACR,CAACA,MAAO,sEACR,CAACA,MAAO,4BACR,CAACA,MAAO,4BACR,CAACA,MAAO,oDACR,CAACA,MAAO,kCACR,CAACA,MAAO,kCACR,CAACA,MAAO,4EACR,CAACA,MAAO,+IACR,CAACA,MAAO,kCACR,CAACA,MAAO,8EACR,CAACA,MAAO,wCACR,CAACA,MAAO,oDACR,CAACA,MAAO,wCACR,CAACA,MAAO,yFACR,CAACA,MAAO,8CACR,CAACA,MAAO,8CACR,CAACA,MAAO,sEACR,CAACA,MAAO,sEACR,CAACA,MAAO,oDACR,CAACA,MAAO,gEACR,CAACA,MAAO,0DACR,CAACA,MAAO,wCACR,CAACA,MAAO,kCACR,CAACA,MAAO,kCACR,CAACA,MAAO,4BACR,CAACA,MAA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","file":"static/js/main.3255fe9b.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport Heading from 'arui-feather/heading';\nimport styles from './Order.module.css';\nimport GridRow from 'arui-feather/grid-row';\nimport GridCol from 'arui-feather/grid-col';\nimport Paragraph from 'arui-feather/paragraph';\nimport IconCategoryGuard from 'arui-feather/icon/category/category-guard';\nimport Form from 'arui-feather/form';\nimport FormField from 'arui-feather/form-field';\nimport Input from 'arui-feather/input';\nimport CheckBox from 'arui-feather/checkbox';\nimport Button from 'arui-feather/button';\nimport InputAutocomplete from 'arui-feather/input-autocomplete';\nimport CalendarInput from 'arui-feather/calendar-input';\nimport moment from 'moment';\nimport Spin from 'arui-feather/spin';\nimport Notification from 'arui-feather/notification';\n\nconst cities = [\n    {value: 'Абакан'},\n    {value: 'Анадырь'},\n    {value: 'Архангельск'},\n    {value: 'Астрахань'},\n    {value: 'Барнаул'},\n    {value: 'Белгород'},\n    {value: 'Биробиджан'},\n    {value: 'Благовещенск'},\n    {value: 'Брянск'},\n    {value: 'Великий Новгород'},\n    {value: 'Владивосток'},\n    {value: 'Владикавказ'},\n    {value: 'Владимир'},\n    {value: 'Волгоград'},\n    {value: 'Вологда'},\n    {value: 'Воронеж'},\n    {value: 'Горно-Алтайск'},\n    {value: 'Грозный'},\n    {value: 'Екатеринбург'},\n    {value: 'Иваново'},\n    {value: 'Ижевск'},\n    {value: 'Иркутск'},\n    {value: 'Йошкар-Ола'},\n    {value: 'Казань'},\n    {value: 'Калининград'},\n    {value: 'Калуга'},\n    {value: 'Кемерово'},\n    {value: 'Киров'},\n    {value: 'Кострома'},\n    {value: 'Краснодар'},\n    {value: 'Красноярск'},\n    {value: 'Курган'},\n    {value: 'Курск'},\n    {value: 'Кызыл'},\n    {value: 'Липецк'},\n    {value: 'Магадан'},\n    {value: 'Магас'},\n    {value: 'Майкоп'},\n    {value: 'Махачкала'},\n    {value: 'Москва'},\n    {value: 'Мурманск'},\n    {value: 'Нальчик'},\n    {value: 'Нарьян-Мар'},\n    {value: 'Нижний Новгород'},\n    {value: 'Новосибирск'},\n    {value: 'Омск'},\n    {value: 'Орёл'},\n    {value: 'Оренбург'},\n    {value: 'Пенза'},\n    {value: 'Пермь'},\n    {value: 'Петрозаводск'},\n    {value: 'Петропавловск-Камчатский'},\n    {value: 'Псков'},\n    {value: 'Ростов-на-Дону'},\n    {value: 'Рязань'},\n    {value: 'Салехард'},\n    {value: 'Самара'},\n    {value: 'Санкт-Петербург'},\n    {value: 'Саранск'},\n    {value: 'Саратов'},\n    {value: 'Севастополь'},\n    {value: 'Симферополь'},\n    {value: 'Смоленск'},\n    {value: 'Ставрополь'},\n    {value: 'Сыктывкар'},\n    {value: 'Тамбов'},\n    {value: 'Тверь'},\n    {value: 'Томск'},\n    {value: 'Тула'},\n    {value: 'Тюмень'},\n    {value: 'Улан-Удэ'},\n    {value: 'Ульяновск'},\n    {value: 'Уфа'},\n    {value: 'Хабаровск'},\n    {value: 'Ханты-Мансийск'},\n    {value: 'Чебоксары'},\n    {value: 'Челябинск'},\n    {value: 'Черкесск'},\n    {value: 'Чита'},\n    {value: 'Элиста'},\n    {value: 'Южно-Сахалинск'},\n    {value: 'Якутск'},\n    {value: 'Ярославль'},\n];\n\nconst dateFormat = 'DD.MM.YYYY';\nconst dateBound = 3;\nconst dateMin = moment().add(dateBound, 'days');\n\nfunction Order() {\n    const [city, setCity] = useState('');\n    const [cityError, setCityError] = useState(null);\n\n    const [date, setDate] = useState(dateMin.format(dateFormat));\n    const [dateError, setDateError] = useState(null);\n    const [name, setName] = useState('');\n    const [nameError, setNameError] = useState(null);\n    const [phone, setPhone] = useState('');\n    const [phoneError, setPhoneError] = useState(null);\n    const [agreement, setAgreement] = useState(false);\n    const [agreementError, setAgreementError] = useState(null);\n    const [loading, setLoading] = useState(false);\n    const [notification, setNotification] = useState(false);\n\n    const filteredCities = (city, cities) => {\n        const input = city.trim();\n        if (input === '' || input.length < 2) {\n            return [];\n        }\n\n        const regex = new RegExp(input.toLowerCase().replace(/(?!$)|(?=$)/gm, '.*'));\n\n        return cities.filter(({value}) => regex.test(value.toLowerCase()));\n    };\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        if (city.trim() === '') {\n            setCityError('Поле обязательно для заполнения');\n            return;\n        }\n\n        if (!cities.find(o => o.value.toLowerCase() === city.toLowerCase())) {\n            setCityError('Доставка в выбранный город недоступна');\n            return;\n        }\n\n        setCityError(null);\n\n        const momentDate = moment(date, dateFormat, true);\n        if (!momentDate.isValid()) {\n            setDateError('Неверно введена дата');\n            return;\n        }\n\n        if (momentDate.isBefore(dateMin, 'days')) {\n            setDateError('Заказ на выбранную дату невозможен');\n            return;\n        }\n\n        setDateError(null);\n\n        if (name.trim() === '') {\n            setNameError('Поле обязательно для заполнения');\n            return;\n        }\n\n        if (!/^[- А-Яа-я]+$/.test(name.trim())) {\n            setNameError('Имя и Фамилия указаные неверно. Допустимы только русские буквы, пробелы и дефисы.');\n            return;\n        }\n\n        setNameError(null);\n\n        if (phone.trim() === '') {\n            setPhoneError('Поле обязательно для заполнения');\n            return;\n        }\n\n        if (!/^\\+\\d{11}$/.test(phone.trim())) {\n            setPhoneError('Телефон указан неверно. Должно быть 11 цифр, например, +79012345678.');\n            return;\n        }\n\n        setPhoneError(null);\n\n        if (agreement === false) {\n            setAgreementError(true);\n            return;\n        }\n\n        setAgreementError(null);\n\n        setLoading(true);\n        setTimeout(() => {\n            setLoading(false);\n            setNotification(true);\n        }, 10000);\n    };\n\n    return (\n        <React.Fragment>\n            <Heading size='l'>Карта с доставкой!</Heading>\n            <Form onSubmit={handleSubmit}>\n                <fieldset disabled={loading}>\n                    <FormField>\n                        <InputAutocomplete\n                            data-test-id='city'\n                            value={city}\n                            placeholder='Город'\n                            hint='Выберите ваш город'\n                            options={filteredCities(city, cities)}\n                            closeOnSelect={true}\n                            width='available'\n                            onChange={setCity}\n                            onItemSelect={(item) => setCity(item.value)}\n                            error={cityError}\n                        />\n                    </FormField>\n                    <FormField>\n                        <CalendarInput\n                            data-test-id='date'\n                            value={date}\n                            calendar={{\n                                earlierLimit: dateMin.unix() * 1000,\n                                showToday: true,\n                            }}\n                            placeholder='Дата встречи'\n                            options={filteredCities(city, cities)}\n                            closeOnSelect={true}\n                            width='available'\n                            hint='Выберите дату встречи с представителем банка'\n                            onChange={setDate}\n                            error={dateError}\n                        />\n                    </FormField>\n                    <FormField>\n                        <Input\n                            data-test-id='name'\n                            name='name'\n                            type='text'\n                            label='Фамилия и имя'\n                            hint='Укажите точно как в паспорте'\n                            width='available'\n                            value={name}\n                            onChange={setName}\n                            error={nameError}\n                        />\n                    </FormField>\n                    <FormField>\n                        <Input\n                            data-test-id='phone'\n                            name='phone'\n                            type='tel'\n                            label='Мобильный телефон'\n                            hint='На указанный номер моб. тел. будет отправлен смс-код для подтверждения заявки на карту. Проверьте, что номер ваш и введен корректно.'\n                            width='available'\n                            value={phone}\n                            onChange={setPhone}\n                            error={phoneError}\n                        />\n                    </FormField>\n                    <FormField>\n                        <CheckBox\n                            data-test-id='agreement'\n                            name='agreement'\n                            text='Я соглашаюсь с условиями обработки и использования моих персональных данных'\n                            className={agreementError && 'input_invalid'}\n                            checked={agreement}\n                            onChange={setAgreement}\n                        />\n                    </FormField>\n                    <GridRow>\n                        <GridCol>\n                            <Paragraph className={styles.guardText}>\n                                <IconCategoryGuard size='m' name='category-guard'/>&nbsp;\n                                Мы гарантируем безопасность ваших данных\n                            </Paragraph>\n                        </GridCol>\n                        <GridCol width='3'>\n                            <FormField>\n                                <Button view='extra' onClick={handleSubmit}\n                                        icon={<Spin visible={loading} theme='alfa-on-color'/>}>Забронировать</Button>\n                            </FormField>\n                        </GridCol>\n                    </GridRow>\n                </fieldset>\n            </Form>\n            <Notification\n                data-test-id='notification'\n                title='Успешно!'\n                visible={notification}\n                onCloseTimeout={() => setNotification(false)}\n                onCloserClick={() => setNotification(false)}\n            >\n                Встреча успешно забронирована на {date}\n            </Notification>\n        </React.Fragment>\n    );\n}\n\nexport default Order;\n","import React from 'react';\nimport styles from './App.module.css';\nimport Order from './Order/Order';\n\nfunction App() {\n  return (\n    <div className={styles.appContainer}>\n      <Order />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appContainer\":\"App_appContainer__3jRx1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formContainer\":\"Order_formContainer__ZWXAN\",\"guardText\":\"Order_guardText__yFCDY\",\"cardPreview\":\"Order_cardPreview__47B2k\",\"cardImage\":\"Order_cardImage__Q69ii\",\"hr\":\"Order_hr__2LnZk\"};"],"sourceRoot":""}